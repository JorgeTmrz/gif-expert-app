{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prev","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","gifs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,kBACY,OAAVJ,QAAU,IAAVA,OAAA,EAAAA,EAAYK,OAAOC,QAAS,GAAmB,MAAdN,IACnCF,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACfC,EADe,yFACyEC,UAC5FH,GAFmB,sBAISI,MAAMF,GAJf,8BAIqBG,OAJrB,uBAIbC,EAJa,EAIbA,KAJa,kBAMdA,EAAKC,KAAI,SAACC,GACf,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXR,IAAKM,EAAIG,OAAOC,iBAAiBV,SAVhB,2CAAH,sDCEPW,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOR,EAAU,EAAVA,IACvC,OACE,sBAAKY,UAAU,2CAAf,UACE,qBAAKC,IAAKb,EAAKc,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCoB,KAAM,GACNY,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACC,GACtBH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGZ,CAAClB,IAEGmB,EDZ2BK,CAAaxB,GAAjCW,EADyB,EAC/BL,KAAcY,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,yCAAd,SAAwDd,IAEvDkB,GACC,mBAAGJ,UAAU,kCAAb,0BAGF,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMhB,aEd5BiB,EAAe,WACnB,IADyB,EAEWxC,mBADxB,CAAC,cADY,mBAElByC,EAFkB,KAEN1C,EAFM,KAQzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG0C,EAAWpB,KAAI,SAACP,GAAD,OACd,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCd5C4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.380f20f9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue?.trim().length > 2 && inputValue != null) {\r\n      setCategories((prev) => [inputValue, ...prev]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `http://api.giphy.com/v1/gifs/search?api_key=LzmwBN7fikpimKs8eYkJJP0J407Y2KQB&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const { data } = await (await fetch(url)).json();\r\n\r\n  return data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__rotateIn\">\r\n      <img src={url} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate_animated animate__jackInTheBox\">{category}</h3>\r\n\r\n      {loading && (\r\n        <p className=\"animate_animated animate__hinge\">\"Loading...\"</p>\r\n      )}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((image) => (\r\n          <GifGridItem key={image.id} {...image} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((gifs) => {\r\n      setState({\r\n        data: gifs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const cat = [\"One Piece\"];\r\n  const [categories, setCategories] = useState(cat);\r\n\r\n  // const handleAdd = () => {\r\n  //     setCategories(prev => [...prev, \"One Piece\"]);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid category={category} key={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { GifExpertApp };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}